services:
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6380:6379" # Se mapea el puerto interno 6379 al 6380 en el host para evitar conflictos
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 1s
      retries: 3
  db:
    container_name: postgres-db
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5433:5432" # Se mapea el puerto interno 5433 al 5432 en el host para evitar conflictos
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d mydb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data
  mongodb:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27018:27017" # Se mapea el puerto interno 27017 al 27018 en el host para evitar conflictos
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: restaurant
    volumes:
      - mongo_data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: [ "CMD", "mongosh", "--quiet", "--host", "mongo", "--port", "27017", "-u", "root", "-p", "example", "--authenticationDatabase", "admin", "--eval", "db.runCommand({ ping: 1 }).ok" ]
      interval: 10s
      timeout: 5s
      retries: 5
  orders-app:
    container_name: orders-app
    restart: always
    build:
      context: ./orders-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      REDIS_URL: redis://redis:6379
      PGSQL_DATABASE_URL: postgres://user:password@db:5432/mydb
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
  kitchen-app:
    container_name: kitchen-app
    restart: always
    build:
      context: ./kitchen-app
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      REDIS_URL: redis://redis:6379
      PGSQL_DATABASE_URL: postgres://user:password@db:5432/mydb
      WS_INVENTORY: ws://inventory-app:3002 # Comunicación interna con inventory-app
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
  inventory-app:
    container_name: inventory-app
    restart: always
    build:
      context: ./inventory-app
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      # Conexión a MongoDB con credenciales
      MONGO_URI: mongodb://root:example@mongo:27017/restaurant?authSource=admin
      PURCHASE_URL: https://recruitment.alegra.com/api/farmers-market/buy
    depends_on:
      mongodb:
        condition: service_healthy

volumes:
  pg_data:
  mongo_data:
